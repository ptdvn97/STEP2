CCS PCM C Compiler, Version 5.025, 5967               25-Oct-17 14:33

               Filename:   C:\Users\Dung Phan\Documents\STEP2\main.lst

               ROM used:   295 words (4%)
                           Largest free fragment is 2048
               RAM used:   15 (4%) at main() level
                           17 (5%) worst case
               Stack used: 3 locations (0 in main + 3 for interrupts)
               Stack size: 8

*
0000:  MOVLW  01
0001:  MOVWF  0A
0002:  GOTO   114
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BCF    03.7
0016:  BCF    03.5
0017:  BTFSS  0B.3
0018:  GOTO   01B
0019:  BTFSC  0B.0
001A:  GOTO   02C
001B:  MOVF   22,W
001C:  MOVWF  04
001D:  MOVF   23,W
001E:  MOVWF  77
001F:  MOVF   24,W
0020:  MOVWF  78
0021:  MOVF   25,W
0022:  MOVWF  79
0023:  MOVF   26,W
0024:  MOVWF  7A
0025:  MOVF   20,W
0026:  MOVWF  0A
0027:  SWAPF  21,W
0028:  MOVWF  03
0029:  SWAPF  7F,F
002A:  SWAPF  7F,W
002B:  RETFIE
002C:  BCF    0A.3
002D:  BCF    0A.4
002E:  GOTO   061
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=20000000) 
002F:  MOVLW  2A
0030:  MOVWF  04
0031:  BCF    03.7
0032:  MOVF   00,W
0033:  BTFSC  03.2
0034:  GOTO   042
0035:  MOVLW  06
0036:  MOVWF  78
0037:  CLRF   77
0038:  DECFSZ 77,F
0039:  GOTO   038
003A:  DECFSZ 78,F
003B:  GOTO   037
003C:  MOVLW  7B
003D:  MOVWF  77
003E:  DECFSZ 77,F
003F:  GOTO   03E
0040:  DECFSZ 00,F
0041:  GOTO   035
0042:  RETURN
....................  
....................  
....................  
.................... #define BUT_1   input(PIN_B4) 
.................... #define BUT_2   input(PIN_B5) 
....................  
.................... #define A PIN_D4 
.................... #define B PIN_D5 
.................... #define C PIN_D6 
.................... #define D PIN_D7 
....................  
.................... int m=0,n=0,k=0; 
....................  
.................... void delay() 
.................... { 
....................    delay_ms(60); 
0043:  MOVLW  3C
0044:  MOVWF  2A
0045:  CALL   02F
....................    if(BUT_2==0||BUT_1==0) 
0046:  BSF    03.5
0047:  BSF    06.5
0048:  BCF    03.5
0049:  BTFSS  06.5
004A:  GOTO   050
004B:  BSF    03.5
004C:  BSF    06.4
004D:  BCF    03.5
004E:  BTFSC  06.4
004F:  GOTO   060
....................             { 
....................                   while(BUT_2==0||BUT_1==0) 
0050:  BSF    03.5
0051:  BSF    06.5
0052:  BCF    03.5
0053:  BTFSS  06.5
0054:  GOTO   05A
0055:  BSF    03.5
0056:  BSF    06.4
0057:  BCF    03.5
0058:  BTFSC  06.4
0059:  GOTO   05E
....................                   {delay_ms(1);} 
005A:  MOVLW  01
005B:  MOVWF  2A
005C:  CALL   02F
005D:  GOTO   050
....................                   n=0,m=0; 
005E:  CLRF   28
005F:  CLRF   27
....................                   break; 
....................             } 
0060:  RETURN
.................... } 
....................  
.................... #INT_RB 
.................... void interrupt() 
.................... { 
.................... while(1) 
.................... { 
....................    if(BUT_1==0) 
0061:  BSF    03.5
0062:  BSF    06.4
0063:  BCF    03.5
0064:  BTFSC  06.4
0065:  GOTO   0B8
....................    { 
....................       n=1; 
0066:  MOVLW  01
0067:  MOVWF  28
....................       while(BUT_1==0) 
0068:  BSF    03.5
0069:  BSF    06.4
006A:  BCF    03.5
006B:  BTFSC  06.4
006C:  GOTO   071
....................          {delay_ms(1);} 
006D:  MOVLW  01
006E:  MOVWF  2A
006F:  CALL   02F
0070:  GOTO   068
....................       while(n==1) 
0071:  DECFSZ 28,W
0072:  GOTO   0B8
....................       { 
....................           
....................          output_bit(A,1); 
0073:  BSF    08.4
0074:  BSF    03.5
0075:  BCF    08.4
....................          output_bit(B,0); 
0076:  BCF    03.5
0077:  BCF    08.5
0078:  BSF    03.5
0079:  BCF    08.5
....................          output_bit(C,0); 
007A:  BCF    03.5
007B:  BCF    08.6
007C:  BSF    03.5
007D:  BCF    08.6
....................          output_bit(D,1); 
007E:  BCF    03.5
007F:  BSF    08.7
0080:  BSF    03.5
0081:  BCF    08.7
....................          delay(); 
0082:  BCF    03.5
0083:  CALL   043
....................          output_bit(A,0); 
0084:  BCF    08.4
0085:  BSF    03.5
0086:  BCF    08.4
....................          output_bit(B,1); 
0087:  BCF    03.5
0088:  BSF    08.5
0089:  BSF    03.5
008A:  BCF    08.5
....................          output_bit(C,0); 
008B:  BCF    03.5
008C:  BCF    08.6
008D:  BSF    03.5
008E:  BCF    08.6
....................          output_bit(D,1); 
008F:  BCF    03.5
0090:  BSF    08.7
0091:  BSF    03.5
0092:  BCF    08.7
....................          delay(); 
0093:  BCF    03.5
0094:  CALL   043
....................          output_bit(A,0); 
0095:  BCF    08.4
0096:  BSF    03.5
0097:  BCF    08.4
....................          output_bit(B,1); 
0098:  BCF    03.5
0099:  BSF    08.5
009A:  BSF    03.5
009B:  BCF    08.5
....................          output_bit(C,1); 
009C:  BCF    03.5
009D:  BSF    08.6
009E:  BSF    03.5
009F:  BCF    08.6
....................          output_bit(D,0); 
00A0:  BCF    03.5
00A1:  BCF    08.7
00A2:  BSF    03.5
00A3:  BCF    08.7
....................          delay(); 
00A4:  BCF    03.5
00A5:  CALL   043
....................          output_bit(A,1); 
00A6:  BSF    08.4
00A7:  BSF    03.5
00A8:  BCF    08.4
....................          output_bit(B,0); 
00A9:  BCF    03.5
00AA:  BCF    08.5
00AB:  BSF    03.5
00AC:  BCF    08.5
....................          output_bit(C,1); 
00AD:  BCF    03.5
00AE:  BSF    08.6
00AF:  BSF    03.5
00B0:  BCF    08.6
....................          output_bit(D,0); 
00B1:  BCF    03.5
00B2:  BCF    08.7
00B3:  BSF    03.5
00B4:  BCF    08.7
....................          delay(); 
00B5:  BCF    03.5
00B6:  CALL   043
00B7:  GOTO   071
....................       } 
....................    } 
....................    if(BUT_2==0) 
00B8:  BSF    03.5
00B9:  BSF    06.5
00BA:  BCF    03.5
00BB:  BTFSC  06.5
00BC:  GOTO   10F
....................    { 
....................       m=1; 
00BD:  MOVLW  01
00BE:  MOVWF  27
....................       while(BUT_2==0) 
00BF:  BSF    03.5
00C0:  BSF    06.5
00C1:  BCF    03.5
00C2:  BTFSC  06.5
00C3:  GOTO   0C8
....................          {delay_ms(1);} 
00C4:  MOVLW  01
00C5:  MOVWF  2A
00C6:  CALL   02F
00C7:  GOTO   0BF
....................       while(m==1) 
00C8:  DECFSZ 27,W
00C9:  GOTO   10F
....................       { 
....................           
....................          output_bit(A,1); 
00CA:  BSF    08.4
00CB:  BSF    03.5
00CC:  BCF    08.4
....................          output_bit(B,0); 
00CD:  BCF    03.5
00CE:  BCF    08.5
00CF:  BSF    03.5
00D0:  BCF    08.5
....................          output_bit(C,1); 
00D1:  BCF    03.5
00D2:  BSF    08.6
00D3:  BSF    03.5
00D4:  BCF    08.6
....................          output_bit(D,0); 
00D5:  BCF    03.5
00D6:  BCF    08.7
00D7:  BSF    03.5
00D8:  BCF    08.7
....................          delay(); 
00D9:  BCF    03.5
00DA:  CALL   043
....................          output_bit(A,0); 
00DB:  BCF    08.4
00DC:  BSF    03.5
00DD:  BCF    08.4
....................          output_bit(B,1); 
00DE:  BCF    03.5
00DF:  BSF    08.5
00E0:  BSF    03.5
00E1:  BCF    08.5
....................          output_bit(C,1); 
00E2:  BCF    03.5
00E3:  BSF    08.6
00E4:  BSF    03.5
00E5:  BCF    08.6
....................          output_bit(D,0); 
00E6:  BCF    03.5
00E7:  BCF    08.7
00E8:  BSF    03.5
00E9:  BCF    08.7
....................          delay(); 
00EA:  BCF    03.5
00EB:  CALL   043
....................          output_bit(A,0); 
00EC:  BCF    08.4
00ED:  BSF    03.5
00EE:  BCF    08.4
....................          output_bit(B,1); 
00EF:  BCF    03.5
00F0:  BSF    08.5
00F1:  BSF    03.5
00F2:  BCF    08.5
....................          output_bit(C,0); 
00F3:  BCF    03.5
00F4:  BCF    08.6
00F5:  BSF    03.5
00F6:  BCF    08.6
....................          output_bit(D,1); 
00F7:  BCF    03.5
00F8:  BSF    08.7
00F9:  BSF    03.5
00FA:  BCF    08.7
....................          delay(); 
00FB:  BCF    03.5
00FC:  CALL   043
....................          output_bit(A,1); 
00FD:  BSF    08.4
00FE:  BSF    03.5
00FF:  BCF    08.4
....................          output_bit(B,0); 
0100:  BCF    03.5
0101:  BCF    08.5
0102:  BSF    03.5
0103:  BCF    08.5
....................          output_bit(C,0); 
0104:  BCF    03.5
0105:  BCF    08.6
0106:  BSF    03.5
0107:  BCF    08.6
....................          output_bit(D,1); 
0108:  BCF    03.5
0109:  BSF    08.7
010A:  BSF    03.5
010B:  BCF    08.7
....................          delay(); 
010C:  BCF    03.5
010D:  CALL   043
010E:  GOTO   0C8
....................       } 
....................    } 
010F:  GOTO   061
.................... } 
0110:  BCF    0B.0
0111:  BCF    0A.3
0112:  BCF    0A.4
0113:  GOTO   01B
.................... } 
.................... void main() 
0114:  MOVF   03,W
0115:  ANDLW  1F
0116:  MOVWF  03
0117:  CLRF   27
0118:  CLRF   28
0119:  CLRF   29
011A:  BSF    03.5
011B:  BSF    1F.0
011C:  BSF    1F.1
011D:  BSF    1F.2
011E:  BCF    1F.3
011F:  MOVLW  07
0120:  MOVWF  1C
0121:  BCF    03.7
.................... { 
....................    enable_interrupts(INT_RB); 
0122:  BCF    03.5
0123:  BSF    0B.3
....................    enable_interrupts(GLOBAL);   
0124:  MOVLW  C0
0125:  IORWF  0B,F
.................... } 
0126:  SLEEP

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
